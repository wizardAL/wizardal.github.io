{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/hollow/source/sw.js","path":"sw.js","modified":1,"renderable":1},{"_id":"themes/hollow/source/css/article.styl","path":"css/article.styl","modified":1,"renderable":1},{"_id":"themes/hollow/source/js/viewer.min.js","path":"js/viewer.min.js","modified":1,"renderable":1},{"_id":"themes/hollow/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/hollow/source/css/custom.styl","path":"css/custom.styl","modified":1,"renderable":1},{"_id":"themes/hollow/source/css/mixins.styl","path":"css/mixins.styl","modified":1,"renderable":1},{"_id":"themes/hollow/source/css/more.styl","path":"css/more.styl","modified":1,"renderable":1},{"_id":"themes/hollow/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hollow/source/css/variables.styl","path":"css/variables.styl","modified":1,"renderable":1},{"_id":"themes/hollow/source/css/viewer.min.css","path":"css/viewer.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"aa9b009b4593eab89b85745e500fe8386279d5d3","modified":1593069290557},{"_id":"themes/hollow/.gitignore","hash":"83100025516bc493fb5b53debba000067b27912b","modified":1593069043049},{"_id":"themes/hollow/LICENSE","hash":"0aa093714c449e496e41093e55e939d19dd791d6","modified":1593069043049},{"_id":"themes/hollow/README.md","hash":"cd24662a37ba374aad34495bfedacec9fb867ca8","modified":1593069043049},{"_id":"themes/hollow/_config.yml","hash":"338285c14acc88e04ff68afa546972deb3e1ab65","modified":1593069043050},{"_id":"source/_posts/.DS_Store","hash":"a0ff483aad2d261f00147e33d7d46d862e6fa70f","modified":1593069568617},{"_id":"source/_posts/全链路压测.md","hash":"2efe84dc357e531e9713277700efeb5e0f4a4163","modified":1593071432162},{"_id":"source/_posts/端午.md","hash":"8d6f71d06f440f7419de135429b1d8e2c8ab8e71","modified":1593071386771},{"_id":"source/_posts/系统架构原则.md","hash":"e170cd018272af295770ce067d2062807874fc27","modified":1593071420255},{"_id":"themes/hollow/images/hexo-theme-hollow-03.png","hash":"485d106ef098c84a2f2aa9fe16043a72f6d0edb5","modified":1593069043053},{"_id":"themes/hollow/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1593069043053},{"_id":"themes/hollow/languages/default.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1593069043053},{"_id":"themes/hollow/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1593069043053},{"_id":"themes/hollow/languages/zh-Hans.yml","hash":"053c45b0db64929e9fa2b1dbf271588d1118b911","modified":1593069043053},{"_id":"themes/hollow/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1593069043054},{"_id":"themes/hollow/layout/archive.ejs","hash":"8bb86d014077bb47d5a337116b6b4576ec99eaec","modified":1593069043058},{"_id":"themes/hollow/layout/index.ejs","hash":"d274b3de874bd3924611c7d482ce980c8af2999f","modified":1593069043058},{"_id":"themes/hollow/layout/layout.ejs","hash":"a6b2449018f8869ed6b00d3512d7b99b84b84248","modified":1593069043058},{"_id":"themes/hollow/layout/page.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1593069043058},{"_id":"themes/hollow/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1593069043058},{"_id":"themes/hollow/source/sw.js","hash":"84636ab8d56217ab25821d31a2f13bd84d824925","modified":1593069043065},{"_id":"themes/hollow/images/hexo-theme-hollow-01.png","hash":"121dc5af840d98a376683322712adf082e2fd3e8","modified":1593069043051},{"_id":"themes/hollow/layout/_partial/article-archive.ejs","hash":"d52b04f27427b0a4ff97522175bef8ec8e0a9130","modified":1593069043054},{"_id":"themes/hollow/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1593069043054},{"_id":"themes/hollow/layout/_partial/article-full.ejs","hash":"52f8d64f31a1210fd0b3d43824323a2d2b8a49f1","modified":1593069043054},{"_id":"themes/hollow/layout/_partial/article-index.ejs","hash":"d9ca79142cae43cabe7f4f3a83a2e66dba79fe7e","modified":1593069043055},{"_id":"themes/hollow/layout/_partial/article-tags.ejs","hash":"156eb953ad23071f789c3f0566748a6209dc586d","modified":1593069043055},{"_id":"themes/hollow/layout/_partial/backhome.ejs","hash":"c7e09466b8c7104b82403df87e07585115b4d8c9","modified":1593069043055},{"_id":"themes/hollow/layout/_partial/comment.ejs","hash":"bb64f1f1ee763bb76b589b06f9a76ef17a64246a","modified":1593069043055},{"_id":"themes/hollow/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1593069043055},{"_id":"themes/hollow/layout/_partial/gosite.ejs","hash":"bbfeab83162046ef7fb585cf9e2bead7baa9a90d","modified":1593069043056},{"_id":"themes/hollow/layout/_partial/head.ejs","hash":"ee13d04c835536f4f8e5aed97ac2b505a4007c2d","modified":1593069043056},{"_id":"themes/hollow/layout/_partial/img-viewer.ejs","hash":"6593fd3d7dc857d8b7568237cf3a26175426bfd2","modified":1593069043056},{"_id":"themes/hollow/layout/_partial/pagination.ejs","hash":"9f086bd506077b121563ff66123cdae4ccfbed50","modified":1593069043057},{"_id":"themes/hollow/layout/_partial/scripts.ejs","hash":"bd87ea67ee82404b4f128fb1c7683350afb54461","modified":1593069043057},{"_id":"themes/hollow/layout/_partial/search.ejs","hash":"ac097e42f0fb0078705ee6b74f0b82fe803a3230","modified":1593069043057},{"_id":"themes/hollow/layout/_partial/service-worker.ejs","hash":"6205c87cf894e235945455d0aa83388b48325b95","modified":1593069043057},{"_id":"themes/hollow/source/css/article.styl","hash":"f853603126764420c3fc6fdd7ab0c7c852c3ef18","modified":1593069043059},{"_id":"themes/hollow/source/js/viewer.min.js","hash":"39e7258277977e6f8f5dd8ec1e0180d6560c0ffa","modified":1593069043064},{"_id":"themes/hollow/source/css/base.styl","hash":"2aff742760ebc78cb34100adce7bf354f6bc3be0","modified":1593069043060},{"_id":"themes/hollow/source/css/custom.styl","hash":"3c5e6a6ee901fe359ec6c41a9d568c5d42e320c0","modified":1593069043061},{"_id":"themes/hollow/source/css/mixins.styl","hash":"419db4bc6781d1e256f6f66c040e1768c2d33e07","modified":1593069043061},{"_id":"themes/hollow/source/css/more.styl","hash":"6f46babdda4ac652438618022f7a8e33fb025754","modified":1593069043062},{"_id":"themes/hollow/source/css/style.styl","hash":"7931fe8d8750de62c1df402004c11075f5bc3e9f","modified":1593069043062},{"_id":"themes/hollow/source/css/variables.styl","hash":"6f7bf7f0ea2a6cb449bc5b507187b34c2c84e552","modified":1593069043063},{"_id":"themes/hollow/source/css/viewer.min.css","hash":"cad8ec21ef9dff25e039a70fcc375fed41521285","modified":1593069043063},{"_id":"themes/hollow/images/hexo-theme-hollow-02.png","hash":"4da3ef2505ea06f15efaa69d9052d416d2ad7604","modified":1593069043052},{"_id":"public/2018/08/31/全链路压测/index.html","hash":"ed1a13d72399fda36a33fb8f0f7e263f561b293c","modified":1593072493173},{"_id":"public/2018/08/26/系统架构原则/index.html","hash":"63769e1c54c3f7df67d791fb91800c2ddf5d2bf1","modified":1593072493173},{"_id":"public/archives/index.html","hash":"009f7807972ca457182bdd1913cfd26b2b20003b","modified":1593072493173},{"_id":"public/archives/2018/index.html","hash":"e3b348e0b8a21b0e9e8f4216623ccbe22673931f","modified":1593072493173},{"_id":"public/archives/2018/08/index.html","hash":"d7fc8b871e1fa5367a7f4a4627929c85b2034757","modified":1593072493173},{"_id":"public/tags/架构/index.html","hash":"60a4b46542edc32cd380607590981c67e4b87eea","modified":1593072493173},{"_id":"public/index.html","hash":"f55dbcaa9c5cc7360f76823055fd8b4637033557","modified":1593072493173},{"_id":"public/css/base.css","hash":"6fc5f32744b30c336e73048850a62dc6cf127d7a","modified":1593072493173},{"_id":"public/css/mixins.css","hash":"b72b1d6dd43fee3bf360fbb1b0f687c6ec1214da","modified":1593072493173},{"_id":"public/css/article.css","hash":"693a194a41e3e71f765498f30ba7ed901e8e03ec","modified":1593072493173},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593072493173},{"_id":"public/css/more.css","hash":"8a3b69ae821a12f1cada4bf3db5844e21d9447b9","modified":1593072493173},{"_id":"public/css/style.css","hash":"db2c187a83f3110c4b2a37d6e90feda2fe2eb984","modified":1593072493173},{"_id":"public/css/viewer.min.css","hash":"cad8ec21ef9dff25e039a70fcc375fed41521285","modified":1593072493173},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593072493173},{"_id":"public/sw.js","hash":"84636ab8d56217ab25821d31a2f13bd84d824925","modified":1593072493173},{"_id":"public/js/viewer.min.js","hash":"39e7258277977e6f8f5dd8ec1e0180d6560c0ffa","modified":1593072493173}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"全链路压测","feature-img":"assets/img/pexels/desk-messy.jpeg","thumbnail":"assets/img/thumbnails/desk-messy.jpeg","date":"2018-08-30T16:00:00.000Z","_content":"\n整理的全链路压测备战checklist\n\n## 事前\n\n* 风险管理\n* 流量评估\n* 容量评估\n* 容量模型\n* 峰值指标评估\n* 架构梳理\n* 强弱依赖\n* 业务链路梳理\n* 作战手册\n* 配置管理\n* 磁盘清理\n* 云上建站\n* 容器发布\n* 应用发布\n* 配置发布\n* 日志管理\n* 重启\n* 扩容\n* 缓存预热\n* 定时任务\n* 模拟数据构造\n* 监控配置\n\n## 事中\n\n* 单链路压测\n* 单机性能测试\n* 限流测试与验证\n* 资源调度\n* 流量调度\n* 预案测试与演练\n* 故障机器处理\n* 资源稳定性\n* 容错与容灾\n* 安全与防刷\n\n## 事后\n\n* 缩容\n* 机器回收\n\n- 信息维护","source":"_posts/全链路压测.md","raw":"---\nlayout: post\ntitle: 全链路压测\ntags: [架构]\nfeature-img: \"assets/img/pexels/desk-messy.jpeg\"\nthumbnail: \"assets/img/thumbnails/desk-messy.jpeg\"\ndate: 2018-08-31\n---\n\n整理的全链路压测备战checklist\n\n## 事前\n\n* 风险管理\n* 流量评估\n* 容量评估\n* 容量模型\n* 峰值指标评估\n* 架构梳理\n* 强弱依赖\n* 业务链路梳理\n* 作战手册\n* 配置管理\n* 磁盘清理\n* 云上建站\n* 容器发布\n* 应用发布\n* 配置发布\n* 日志管理\n* 重启\n* 扩容\n* 缓存预热\n* 定时任务\n* 模拟数据构造\n* 监控配置\n\n## 事中\n\n* 单链路压测\n* 单机性能测试\n* 限流测试与验证\n* 资源调度\n* 流量调度\n* 预案测试与演练\n* 故障机器处理\n* 资源稳定性\n* 容错与容灾\n* 安全与防刷\n\n## 事后\n\n* 缩容\n* 机器回收\n\n- 信息维护","slug":"全链路压测","published":1,"updated":"2020-06-25T07:50:32.162Z","comments":1,"photos":[],"link":"","_id":"ckbui8b3h0000k7jehq99fj4w","content":"<p>整理的全链路压测备战checklist</p>\n<h2 id=\"事前\"><a href=\"#事前\" class=\"headerlink\" title=\"事前\"></a>事前</h2><ul>\n<li>风险管理</li>\n<li>流量评估</li>\n<li>容量评估</li>\n<li>容量模型</li>\n<li>峰值指标评估</li>\n<li>架构梳理</li>\n<li>强弱依赖</li>\n<li>业务链路梳理</li>\n<li>作战手册</li>\n<li>配置管理</li>\n<li>磁盘清理</li>\n<li>云上建站</li>\n<li>容器发布</li>\n<li>应用发布</li>\n<li>配置发布</li>\n<li>日志管理</li>\n<li>重启</li>\n<li>扩容</li>\n<li>缓存预热</li>\n<li>定时任务</li>\n<li>模拟数据构造</li>\n<li>监控配置</li>\n</ul>\n<h2 id=\"事中\"><a href=\"#事中\" class=\"headerlink\" title=\"事中\"></a>事中</h2><ul>\n<li>单链路压测</li>\n<li>单机性能测试</li>\n<li>限流测试与验证</li>\n<li>资源调度</li>\n<li>流量调度</li>\n<li>预案测试与演练</li>\n<li>故障机器处理</li>\n<li>资源稳定性</li>\n<li>容错与容灾</li>\n<li>安全与防刷</li>\n</ul>\n<h2 id=\"事后\"><a href=\"#事后\" class=\"headerlink\" title=\"事后\"></a>事后</h2><ul>\n<li>缩容</li>\n<li>机器回收</li>\n</ul>\n<ul>\n<li>信息维护</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>整理的全链路压测备战checklist</p>\n<h2 id=\"事前\"><a href=\"#事前\" class=\"headerlink\" title=\"事前\"></a>事前</h2><ul>\n<li>风险管理</li>\n<li>流量评估</li>\n<li>容量评估</li>\n<li>容量模型</li>\n<li>峰值指标评估</li>\n<li>架构梳理</li>\n<li>强弱依赖</li>\n<li>业务链路梳理</li>\n<li>作战手册</li>\n<li>配置管理</li>\n<li>磁盘清理</li>\n<li>云上建站</li>\n<li>容器发布</li>\n<li>应用发布</li>\n<li>配置发布</li>\n<li>日志管理</li>\n<li>重启</li>\n<li>扩容</li>\n<li>缓存预热</li>\n<li>定时任务</li>\n<li>模拟数据构造</li>\n<li>监控配置</li>\n</ul>\n<h2 id=\"事中\"><a href=\"#事中\" class=\"headerlink\" title=\"事中\"></a>事中</h2><ul>\n<li>单链路压测</li>\n<li>单机性能测试</li>\n<li>限流测试与验证</li>\n<li>资源调度</li>\n<li>流量调度</li>\n<li>预案测试与演练</li>\n<li>故障机器处理</li>\n<li>资源稳定性</li>\n<li>容错与容灾</li>\n<li>安全与防刷</li>\n</ul>\n<h2 id=\"事后\"><a href=\"#事后\" class=\"headerlink\" title=\"事后\"></a>事后</h2><ul>\n<li>缩容</li>\n<li>机器回收</li>\n</ul>\n<ul>\n<li>信息维护</li>\n</ul>\n"},{"layout":"post","title":"系统架构原则","date":"2018-08-25T16:00:00.000Z","_content":"\n### 涌现原则\n\n当各实体拼合成一个系统时，实体之间的交互会把功能、行为、性能和其他内在属性涌现出来。\n\n### 整体原则\n\n每个系统都作为某一个或某些个大系统的一小部分而运作，同时，每个系统中也都包含着更小的一些系统。\n\n### 聚焦原则\n\n在任何一个点上都能发现很多影响系统的问题，而其数量已经超过了人们的理解能力。因此，我们必须找出其中最关键、最重要的那些问题，并集中精力思考它们。\n\n### 二元原则\n\n所有由人类构建而成的系统，其本身都同时存在于物理领域和信息领域中。\n\n### 收益原则\n\n好的架构必须使人受益，要想把架构做好，就要专注于功能的涌现，使得系统能够把它的主要功能通过跨越系统边界的接口对外展示出来。\n\n### 价值与架构原则\n\n价值是有着一定成本的利益。架构是由形式所承载的功能。由于利益要通过功能而体现，同时形式又与成本相关，因此，这两个论述之间形成一种特别紧密的联系。\n\n### 与特定解决方案无关的功能原则\n\n糟糕的系统规范书总是把人引向预先定好的某一套具体解决方案、功能或形式中，这可能会令系统架构师的视野变窄，从而不去探索更多的潜在选项。\n\n### 架构师角色原则\n\n架构师的角色是解决歧义、专注创新，并简化复杂度。\n\n### 歧义原则\n\n系统架构的早期阶段充满了歧义。架构师必须解决这种歧义，以便给架构团队定出目标，并持续更新该目标。\n\n### 现代实践压力原则\n\n现代产品开发过程是由同时工作着的多个分布式团队来进行的，而且还有供应商的参与，因此，它更需要有优秀的架构。\n\n### 架构决策原则\n\n我们要把架构决策与其他决策分开，并且要提前花一些时间来谨慎地决定这些问题，因为以后如果想要变更需要付出很高的代价。\n\n### 遗留元素复用原则\n\n要透彻地理解遗留系统及其涌现属性，并在新的架构中把必要的遗留元素包括进来。\n\n### 产品进化原则\n\n系统必须进化，否则就会失去竞争力。在进行架构时，应该把系统中较为稳固的那一部分定义为接口，以便给元素的进化提供便利。\n\n### 开端原则\n\n在产品定义的早期阶段列出的（企业内部和企业外部的）利益相关者会对架构产生极其重大的影响。\n\n### 平衡原则\n\n有很多因素会影响并作用于系统的构想、设计、实现及操作。架构师必须在这些因素中寻求一个平衡点，使大多数重要的利益相关者得到满足。\n\n### 系统问题陈述原则\n\n对问题所做的陈述会确定系统的高层目标，并划定系统的边界。就问题陈述的正确性进行反复的辩论和完善，直到你认为满意为止。\n\n### 歧义与目标原则\n\n架构师必须解决这些歧义，以便提出几条有代表性的目标并持续的更新它们。这些目标要完备且一致，要兼具挑战性与可搭乘性，同时又要为人类所解决问题。\n\n### 创新原则\n\n在架构中进行创新，就是要追求一种能够解决矛盾的好架构。\n\n### 表面复杂原则\n\n我们要对系统进行分解、抽象及分层，将其表面复杂度控制在人类所能理解的范围之内。\n\n### 必备复杂度原则\n\n系统的必备复杂度取决于它的功能。把系统必须实现的功能仔细描述出来，绕后选择一个复杂度最低的概念。\n\n### 第二定律原则\n\n系统的实际复杂度总会超过必备复杂度。架构师要令实际复杂度尽量接近必备复杂度。\n\n### 分解原则\n\n分解是架构师主动做出的选择。分解会影响性能的衡量标准，会影响组织的运作方式及供应商的价值捕获能力。\n\n### \"2下1上\"原则\n\n要想判断出Level 1所做的分解是否合适，必须再向下分解一层，以确定Level 2中的各种关系。\n\n### 优雅原则\n\n对于身处其中的架构师来说，如果系统的必备复杂度较低，而且其分解方式能够同时与多个分解平面相匹配，那么该系统就是优雅的。\n\n### 架构健壮程度原则\n\n好的架构要能够应对各种各样的变化。能够应对变化的那种架构，要么是比较健壮的架构，要么是适应能力比较强的架构。前者能够处理环境中的变化，而后者则能够适应环境中的变化。\n\n### 架构决策的耦合与整理原则\n\n可以按照指标对决策的敏感度以及决策之间的连接度来排定架构决策之间的先后顺序。\n\n> 摘自《System Architecture:Strategy and Product Development for Complex Systems》","source":"_posts/系统架构原则.md","raw":"---\nlayout: post\ntitle: 系统架构原则\ntags: [架构]\ndate: 2018-08-26\n---\n\n### 涌现原则\n\n当各实体拼合成一个系统时，实体之间的交互会把功能、行为、性能和其他内在属性涌现出来。\n\n### 整体原则\n\n每个系统都作为某一个或某些个大系统的一小部分而运作，同时，每个系统中也都包含着更小的一些系统。\n\n### 聚焦原则\n\n在任何一个点上都能发现很多影响系统的问题，而其数量已经超过了人们的理解能力。因此，我们必须找出其中最关键、最重要的那些问题，并集中精力思考它们。\n\n### 二元原则\n\n所有由人类构建而成的系统，其本身都同时存在于物理领域和信息领域中。\n\n### 收益原则\n\n好的架构必须使人受益，要想把架构做好，就要专注于功能的涌现，使得系统能够把它的主要功能通过跨越系统边界的接口对外展示出来。\n\n### 价值与架构原则\n\n价值是有着一定成本的利益。架构是由形式所承载的功能。由于利益要通过功能而体现，同时形式又与成本相关，因此，这两个论述之间形成一种特别紧密的联系。\n\n### 与特定解决方案无关的功能原则\n\n糟糕的系统规范书总是把人引向预先定好的某一套具体解决方案、功能或形式中，这可能会令系统架构师的视野变窄，从而不去探索更多的潜在选项。\n\n### 架构师角色原则\n\n架构师的角色是解决歧义、专注创新，并简化复杂度。\n\n### 歧义原则\n\n系统架构的早期阶段充满了歧义。架构师必须解决这种歧义，以便给架构团队定出目标，并持续更新该目标。\n\n### 现代实践压力原则\n\n现代产品开发过程是由同时工作着的多个分布式团队来进行的，而且还有供应商的参与，因此，它更需要有优秀的架构。\n\n### 架构决策原则\n\n我们要把架构决策与其他决策分开，并且要提前花一些时间来谨慎地决定这些问题，因为以后如果想要变更需要付出很高的代价。\n\n### 遗留元素复用原则\n\n要透彻地理解遗留系统及其涌现属性，并在新的架构中把必要的遗留元素包括进来。\n\n### 产品进化原则\n\n系统必须进化，否则就会失去竞争力。在进行架构时，应该把系统中较为稳固的那一部分定义为接口，以便给元素的进化提供便利。\n\n### 开端原则\n\n在产品定义的早期阶段列出的（企业内部和企业外部的）利益相关者会对架构产生极其重大的影响。\n\n### 平衡原则\n\n有很多因素会影响并作用于系统的构想、设计、实现及操作。架构师必须在这些因素中寻求一个平衡点，使大多数重要的利益相关者得到满足。\n\n### 系统问题陈述原则\n\n对问题所做的陈述会确定系统的高层目标，并划定系统的边界。就问题陈述的正确性进行反复的辩论和完善，直到你认为满意为止。\n\n### 歧义与目标原则\n\n架构师必须解决这些歧义，以便提出几条有代表性的目标并持续的更新它们。这些目标要完备且一致，要兼具挑战性与可搭乘性，同时又要为人类所解决问题。\n\n### 创新原则\n\n在架构中进行创新，就是要追求一种能够解决矛盾的好架构。\n\n### 表面复杂原则\n\n我们要对系统进行分解、抽象及分层，将其表面复杂度控制在人类所能理解的范围之内。\n\n### 必备复杂度原则\n\n系统的必备复杂度取决于它的功能。把系统必须实现的功能仔细描述出来，绕后选择一个复杂度最低的概念。\n\n### 第二定律原则\n\n系统的实际复杂度总会超过必备复杂度。架构师要令实际复杂度尽量接近必备复杂度。\n\n### 分解原则\n\n分解是架构师主动做出的选择。分解会影响性能的衡量标准，会影响组织的运作方式及供应商的价值捕获能力。\n\n### \"2下1上\"原则\n\n要想判断出Level 1所做的分解是否合适，必须再向下分解一层，以确定Level 2中的各种关系。\n\n### 优雅原则\n\n对于身处其中的架构师来说，如果系统的必备复杂度较低，而且其分解方式能够同时与多个分解平面相匹配，那么该系统就是优雅的。\n\n### 架构健壮程度原则\n\n好的架构要能够应对各种各样的变化。能够应对变化的那种架构，要么是比较健壮的架构，要么是适应能力比较强的架构。前者能够处理环境中的变化，而后者则能够适应环境中的变化。\n\n### 架构决策的耦合与整理原则\n\n可以按照指标对决策的敏感度以及决策之间的连接度来排定架构决策之间的先后顺序。\n\n> 摘自《System Architecture:Strategy and Product Development for Complex Systems》","slug":"系统架构原则","published":1,"updated":"2020-06-25T07:50:20.255Z","comments":1,"photos":[],"link":"","_id":"ckbui8b3r0001k7jegmycg955","content":"<h3 id=\"涌现原则\"><a href=\"#涌现原则\" class=\"headerlink\" title=\"涌现原则\"></a>涌现原则</h3><p>当各实体拼合成一个系统时，实体之间的交互会把功能、行为、性能和其他内在属性涌现出来。</p>\n<h3 id=\"整体原则\"><a href=\"#整体原则\" class=\"headerlink\" title=\"整体原则\"></a>整体原则</h3><p>每个系统都作为某一个或某些个大系统的一小部分而运作，同时，每个系统中也都包含着更小的一些系统。</p>\n<h3 id=\"聚焦原则\"><a href=\"#聚焦原则\" class=\"headerlink\" title=\"聚焦原则\"></a>聚焦原则</h3><p>在任何一个点上都能发现很多影响系统的问题，而其数量已经超过了人们的理解能力。因此，我们必须找出其中最关键、最重要的那些问题，并集中精力思考它们。</p>\n<h3 id=\"二元原则\"><a href=\"#二元原则\" class=\"headerlink\" title=\"二元原则\"></a>二元原则</h3><p>所有由人类构建而成的系统，其本身都同时存在于物理领域和信息领域中。</p>\n<h3 id=\"收益原则\"><a href=\"#收益原则\" class=\"headerlink\" title=\"收益原则\"></a>收益原则</h3><p>好的架构必须使人受益，要想把架构做好，就要专注于功能的涌现，使得系统能够把它的主要功能通过跨越系统边界的接口对外展示出来。</p>\n<h3 id=\"价值与架构原则\"><a href=\"#价值与架构原则\" class=\"headerlink\" title=\"价值与架构原则\"></a>价值与架构原则</h3><p>价值是有着一定成本的利益。架构是由形式所承载的功能。由于利益要通过功能而体现，同时形式又与成本相关，因此，这两个论述之间形成一种特别紧密的联系。</p>\n<h3 id=\"与特定解决方案无关的功能原则\"><a href=\"#与特定解决方案无关的功能原则\" class=\"headerlink\" title=\"与特定解决方案无关的功能原则\"></a>与特定解决方案无关的功能原则</h3><p>糟糕的系统规范书总是把人引向预先定好的某一套具体解决方案、功能或形式中，这可能会令系统架构师的视野变窄，从而不去探索更多的潜在选项。</p>\n<h3 id=\"架构师角色原则\"><a href=\"#架构师角色原则\" class=\"headerlink\" title=\"架构师角色原则\"></a>架构师角色原则</h3><p>架构师的角色是解决歧义、专注创新，并简化复杂度。</p>\n<h3 id=\"歧义原则\"><a href=\"#歧义原则\" class=\"headerlink\" title=\"歧义原则\"></a>歧义原则</h3><p>系统架构的早期阶段充满了歧义。架构师必须解决这种歧义，以便给架构团队定出目标，并持续更新该目标。</p>\n<h3 id=\"现代实践压力原则\"><a href=\"#现代实践压力原则\" class=\"headerlink\" title=\"现代实践压力原则\"></a>现代实践压力原则</h3><p>现代产品开发过程是由同时工作着的多个分布式团队来进行的，而且还有供应商的参与，因此，它更需要有优秀的架构。</p>\n<h3 id=\"架构决策原则\"><a href=\"#架构决策原则\" class=\"headerlink\" title=\"架构决策原则\"></a>架构决策原则</h3><p>我们要把架构决策与其他决策分开，并且要提前花一些时间来谨慎地决定这些问题，因为以后如果想要变更需要付出很高的代价。</p>\n<h3 id=\"遗留元素复用原则\"><a href=\"#遗留元素复用原则\" class=\"headerlink\" title=\"遗留元素复用原则\"></a>遗留元素复用原则</h3><p>要透彻地理解遗留系统及其涌现属性，并在新的架构中把必要的遗留元素包括进来。</p>\n<h3 id=\"产品进化原则\"><a href=\"#产品进化原则\" class=\"headerlink\" title=\"产品进化原则\"></a>产品进化原则</h3><p>系统必须进化，否则就会失去竞争力。在进行架构时，应该把系统中较为稳固的那一部分定义为接口，以便给元素的进化提供便利。</p>\n<h3 id=\"开端原则\"><a href=\"#开端原则\" class=\"headerlink\" title=\"开端原则\"></a>开端原则</h3><p>在产品定义的早期阶段列出的（企业内部和企业外部的）利益相关者会对架构产生极其重大的影响。</p>\n<h3 id=\"平衡原则\"><a href=\"#平衡原则\" class=\"headerlink\" title=\"平衡原则\"></a>平衡原则</h3><p>有很多因素会影响并作用于系统的构想、设计、实现及操作。架构师必须在这些因素中寻求一个平衡点，使大多数重要的利益相关者得到满足。</p>\n<h3 id=\"系统问题陈述原则\"><a href=\"#系统问题陈述原则\" class=\"headerlink\" title=\"系统问题陈述原则\"></a>系统问题陈述原则</h3><p>对问题所做的陈述会确定系统的高层目标，并划定系统的边界。就问题陈述的正确性进行反复的辩论和完善，直到你认为满意为止。</p>\n<h3 id=\"歧义与目标原则\"><a href=\"#歧义与目标原则\" class=\"headerlink\" title=\"歧义与目标原则\"></a>歧义与目标原则</h3><p>架构师必须解决这些歧义，以便提出几条有代表性的目标并持续的更新它们。这些目标要完备且一致，要兼具挑战性与可搭乘性，同时又要为人类所解决问题。</p>\n<h3 id=\"创新原则\"><a href=\"#创新原则\" class=\"headerlink\" title=\"创新原则\"></a>创新原则</h3><p>在架构中进行创新，就是要追求一种能够解决矛盾的好架构。</p>\n<h3 id=\"表面复杂原则\"><a href=\"#表面复杂原则\" class=\"headerlink\" title=\"表面复杂原则\"></a>表面复杂原则</h3><p>我们要对系统进行分解、抽象及分层，将其表面复杂度控制在人类所能理解的范围之内。</p>\n<h3 id=\"必备复杂度原则\"><a href=\"#必备复杂度原则\" class=\"headerlink\" title=\"必备复杂度原则\"></a>必备复杂度原则</h3><p>系统的必备复杂度取决于它的功能。把系统必须实现的功能仔细描述出来，绕后选择一个复杂度最低的概念。</p>\n<h3 id=\"第二定律原则\"><a href=\"#第二定律原则\" class=\"headerlink\" title=\"第二定律原则\"></a>第二定律原则</h3><p>系统的实际复杂度总会超过必备复杂度。架构师要令实际复杂度尽量接近必备复杂度。</p>\n<h3 id=\"分解原则\"><a href=\"#分解原则\" class=\"headerlink\" title=\"分解原则\"></a>分解原则</h3><p>分解是架构师主动做出的选择。分解会影响性能的衡量标准，会影响组织的运作方式及供应商的价值捕获能力。</p>\n<h3 id=\"“2下1上”原则\"><a href=\"#“2下1上”原则\" class=\"headerlink\" title=\"“2下1上”原则\"></a>“2下1上”原则</h3><p>要想判断出Level 1所做的分解是否合适，必须再向下分解一层，以确定Level 2中的各种关系。</p>\n<h3 id=\"优雅原则\"><a href=\"#优雅原则\" class=\"headerlink\" title=\"优雅原则\"></a>优雅原则</h3><p>对于身处其中的架构师来说，如果系统的必备复杂度较低，而且其分解方式能够同时与多个分解平面相匹配，那么该系统就是优雅的。</p>\n<h3 id=\"架构健壮程度原则\"><a href=\"#架构健壮程度原则\" class=\"headerlink\" title=\"架构健壮程度原则\"></a>架构健壮程度原则</h3><p>好的架构要能够应对各种各样的变化。能够应对变化的那种架构，要么是比较健壮的架构，要么是适应能力比较强的架构。前者能够处理环境中的变化，而后者则能够适应环境中的变化。</p>\n<h3 id=\"架构决策的耦合与整理原则\"><a href=\"#架构决策的耦合与整理原则\" class=\"headerlink\" title=\"架构决策的耦合与整理原则\"></a>架构决策的耦合与整理原则</h3><p>可以按照指标对决策的敏感度以及决策之间的连接度来排定架构决策之间的先后顺序。</p>\n<blockquote>\n<p>摘自《System Architecture:Strategy and Product Development for Complex Systems》</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"涌现原则\"><a href=\"#涌现原则\" class=\"headerlink\" title=\"涌现原则\"></a>涌现原则</h3><p>当各实体拼合成一个系统时，实体之间的交互会把功能、行为、性能和其他内在属性涌现出来。</p>\n<h3 id=\"整体原则\"><a href=\"#整体原则\" class=\"headerlink\" title=\"整体原则\"></a>整体原则</h3><p>每个系统都作为某一个或某些个大系统的一小部分而运作，同时，每个系统中也都包含着更小的一些系统。</p>\n<h3 id=\"聚焦原则\"><a href=\"#聚焦原则\" class=\"headerlink\" title=\"聚焦原则\"></a>聚焦原则</h3><p>在任何一个点上都能发现很多影响系统的问题，而其数量已经超过了人们的理解能力。因此，我们必须找出其中最关键、最重要的那些问题，并集中精力思考它们。</p>\n<h3 id=\"二元原则\"><a href=\"#二元原则\" class=\"headerlink\" title=\"二元原则\"></a>二元原则</h3><p>所有由人类构建而成的系统，其本身都同时存在于物理领域和信息领域中。</p>\n<h3 id=\"收益原则\"><a href=\"#收益原则\" class=\"headerlink\" title=\"收益原则\"></a>收益原则</h3><p>好的架构必须使人受益，要想把架构做好，就要专注于功能的涌现，使得系统能够把它的主要功能通过跨越系统边界的接口对外展示出来。</p>\n<h3 id=\"价值与架构原则\"><a href=\"#价值与架构原则\" class=\"headerlink\" title=\"价值与架构原则\"></a>价值与架构原则</h3><p>价值是有着一定成本的利益。架构是由形式所承载的功能。由于利益要通过功能而体现，同时形式又与成本相关，因此，这两个论述之间形成一种特别紧密的联系。</p>\n<h3 id=\"与特定解决方案无关的功能原则\"><a href=\"#与特定解决方案无关的功能原则\" class=\"headerlink\" title=\"与特定解决方案无关的功能原则\"></a>与特定解决方案无关的功能原则</h3><p>糟糕的系统规范书总是把人引向预先定好的某一套具体解决方案、功能或形式中，这可能会令系统架构师的视野变窄，从而不去探索更多的潜在选项。</p>\n<h3 id=\"架构师角色原则\"><a href=\"#架构师角色原则\" class=\"headerlink\" title=\"架构师角色原则\"></a>架构师角色原则</h3><p>架构师的角色是解决歧义、专注创新，并简化复杂度。</p>\n<h3 id=\"歧义原则\"><a href=\"#歧义原则\" class=\"headerlink\" title=\"歧义原则\"></a>歧义原则</h3><p>系统架构的早期阶段充满了歧义。架构师必须解决这种歧义，以便给架构团队定出目标，并持续更新该目标。</p>\n<h3 id=\"现代实践压力原则\"><a href=\"#现代实践压力原则\" class=\"headerlink\" title=\"现代实践压力原则\"></a>现代实践压力原则</h3><p>现代产品开发过程是由同时工作着的多个分布式团队来进行的，而且还有供应商的参与，因此，它更需要有优秀的架构。</p>\n<h3 id=\"架构决策原则\"><a href=\"#架构决策原则\" class=\"headerlink\" title=\"架构决策原则\"></a>架构决策原则</h3><p>我们要把架构决策与其他决策分开，并且要提前花一些时间来谨慎地决定这些问题，因为以后如果想要变更需要付出很高的代价。</p>\n<h3 id=\"遗留元素复用原则\"><a href=\"#遗留元素复用原则\" class=\"headerlink\" title=\"遗留元素复用原则\"></a>遗留元素复用原则</h3><p>要透彻地理解遗留系统及其涌现属性，并在新的架构中把必要的遗留元素包括进来。</p>\n<h3 id=\"产品进化原则\"><a href=\"#产品进化原则\" class=\"headerlink\" title=\"产品进化原则\"></a>产品进化原则</h3><p>系统必须进化，否则就会失去竞争力。在进行架构时，应该把系统中较为稳固的那一部分定义为接口，以便给元素的进化提供便利。</p>\n<h3 id=\"开端原则\"><a href=\"#开端原则\" class=\"headerlink\" title=\"开端原则\"></a>开端原则</h3><p>在产品定义的早期阶段列出的（企业内部和企业外部的）利益相关者会对架构产生极其重大的影响。</p>\n<h3 id=\"平衡原则\"><a href=\"#平衡原则\" class=\"headerlink\" title=\"平衡原则\"></a>平衡原则</h3><p>有很多因素会影响并作用于系统的构想、设计、实现及操作。架构师必须在这些因素中寻求一个平衡点，使大多数重要的利益相关者得到满足。</p>\n<h3 id=\"系统问题陈述原则\"><a href=\"#系统问题陈述原则\" class=\"headerlink\" title=\"系统问题陈述原则\"></a>系统问题陈述原则</h3><p>对问题所做的陈述会确定系统的高层目标，并划定系统的边界。就问题陈述的正确性进行反复的辩论和完善，直到你认为满意为止。</p>\n<h3 id=\"歧义与目标原则\"><a href=\"#歧义与目标原则\" class=\"headerlink\" title=\"歧义与目标原则\"></a>歧义与目标原则</h3><p>架构师必须解决这些歧义，以便提出几条有代表性的目标并持续的更新它们。这些目标要完备且一致，要兼具挑战性与可搭乘性，同时又要为人类所解决问题。</p>\n<h3 id=\"创新原则\"><a href=\"#创新原则\" class=\"headerlink\" title=\"创新原则\"></a>创新原则</h3><p>在架构中进行创新，就是要追求一种能够解决矛盾的好架构。</p>\n<h3 id=\"表面复杂原则\"><a href=\"#表面复杂原则\" class=\"headerlink\" title=\"表面复杂原则\"></a>表面复杂原则</h3><p>我们要对系统进行分解、抽象及分层，将其表面复杂度控制在人类所能理解的范围之内。</p>\n<h3 id=\"必备复杂度原则\"><a href=\"#必备复杂度原则\" class=\"headerlink\" title=\"必备复杂度原则\"></a>必备复杂度原则</h3><p>系统的必备复杂度取决于它的功能。把系统必须实现的功能仔细描述出来，绕后选择一个复杂度最低的概念。</p>\n<h3 id=\"第二定律原则\"><a href=\"#第二定律原则\" class=\"headerlink\" title=\"第二定律原则\"></a>第二定律原则</h3><p>系统的实际复杂度总会超过必备复杂度。架构师要令实际复杂度尽量接近必备复杂度。</p>\n<h3 id=\"分解原则\"><a href=\"#分解原则\" class=\"headerlink\" title=\"分解原则\"></a>分解原则</h3><p>分解是架构师主动做出的选择。分解会影响性能的衡量标准，会影响组织的运作方式及供应商的价值捕获能力。</p>\n<h3 id=\"“2下1上”原则\"><a href=\"#“2下1上”原则\" class=\"headerlink\" title=\"“2下1上”原则\"></a>“2下1上”原则</h3><p>要想判断出Level 1所做的分解是否合适，必须再向下分解一层，以确定Level 2中的各种关系。</p>\n<h3 id=\"优雅原则\"><a href=\"#优雅原则\" class=\"headerlink\" title=\"优雅原则\"></a>优雅原则</h3><p>对于身处其中的架构师来说，如果系统的必备复杂度较低，而且其分解方式能够同时与多个分解平面相匹配，那么该系统就是优雅的。</p>\n<h3 id=\"架构健壮程度原则\"><a href=\"#架构健壮程度原则\" class=\"headerlink\" title=\"架构健壮程度原则\"></a>架构健壮程度原则</h3><p>好的架构要能够应对各种各样的变化。能够应对变化的那种架构，要么是比较健壮的架构，要么是适应能力比较强的架构。前者能够处理环境中的变化，而后者则能够适应环境中的变化。</p>\n<h3 id=\"架构决策的耦合与整理原则\"><a href=\"#架构决策的耦合与整理原则\" class=\"headerlink\" title=\"架构决策的耦合与整理原则\"></a>架构决策的耦合与整理原则</h3><p>可以按照指标对决策的敏感度以及决策之间的连接度来排定架构决策之间的先后顺序。</p>\n<blockquote>\n<p>摘自《System Architecture:Strategy and Product Development for Complex Systems》</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckbui8b3h0000k7jehq99fj4w","tag_id":"ckbui8b3t0002k7jehbe4cci8","_id":"ckbui8b3x0004k7jehd1whh72"},{"post_id":"ckbui8b3r0001k7jegmycg955","tag_id":"ckbui8b3t0002k7jehbe4cci8","_id":"ckbui8b3x0005k7jeanz417mj"}],"Tag":[{"name":"架构","_id":"ckbui8b3t0002k7jehbe4cci8"}]}}